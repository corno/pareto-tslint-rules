// tslint:disable: no-shadowed-variable
import { RootBuilder } from "../../src/builder"

export function createRoot(rb: RootBuilder) {
    throw new Error("SDFS")
    return rb.build(
        "Root",
        ct => ct
            .componentType("global", "Global", par => par, p => p
                .text("name")
            )
            .Type("node selection", "NodeSelection"
                , par => par
                    .lookup("property variables", t => t.type("node"), s => s.DTPStep(t => t.dictionary("properties")), "variablesx", t => t.regular())
                    .lookup("component parameters", t => t.root(), s => s.DTPStep(t => t.dictionary("types")), "parameters", t => t.regular())
                    .component_type("state constraints", "state constraints", t => t.resolved())
                , t => t.selector(
                    "Node",
                    s => s
                        .BlockStep(t => t.choice(/*"NodeSelectionType",*/o => o
                            .option("component parameter", /*"NodeComponentTypeParameterSelection", *sc => sc,*/ s => s
                                .BlockStep(t => t.reference("ComponentTypeParameter", /*lut => lut.component_parameter("component parameters"),*/ sc => sc
                                    .StateConstraint("node", "type", "node", "CTPNode", sc => sc)
                                ))
                            )
                            .option("property variable", /*"NodeSelectionPropertyVariableSelection", *sc => sc,*/ s => s
                                .BlockStep(t => t.reference("PropertyVariable", /*lut => lut.component_parameter("property variables"),*/ sc => sc
                                    .StateConstraint("sibling", "type", "sibling", "Sibling", sc => sc)
                                ))
                            )
                            .option("state constraint", /*"StateConstraintSelection", *sc => sc,*/ s => s
                                .BlockStep(t => t.reference("StateConstraint", /*lut => lut.component_parameter("state constrains"),*/ sc => sc))
                            )
                            // .State("property variable", "NodeSelectionPropertyVariableSelection", sc => sc, p => p
                            //     .reference("variable", a => a.component_parameter("property variables"), sc => sc
                            //         .StateConstraint("sibling", "type", "sibling", sc => sc
                            //             .StateConstraint("component", "type", "component", sc => sc)
                            //         )
                            //     )
                            // )
                            // .State("state constraint", "StateConstraintSelection", sc => sc, p => p
                            //     .reference("constraint", a => a.component_parameter("state constraints"), sc => sc)
                            // )
                        ))
                )
            )
            .selectorMock("node selection", "NodeSelection"
                , par => par
                    .lookup("property variables", t => t.type("node"), s => s.DTPStep(t => t.dictionary("properties")), "variables", t => t.regular())
                    .lookup("component parameters", t => t.root(), s => s.DTPStep(t => t.dictionary("types")), "parameters", t => t.regular())
                    .component_type("state constraints", "state constraints", t => t.resolved())
                , p => p
                    .stateGroup("type", "NodeSelectionType",
                        s => s
                            .State("component parameter", "NodeComponentTypeParameterSelection", sc => sc, p => p
                                .reference("parameter", lut => lut.component_parameter("component parameters"), sc => sc
                                    .StateConstraint("node", "type", "node", "CTPNode", sc => sc)
                                )
                            )
                            .State("property variable", "NodeSelectionPropertyVariableSelection", sc => sc, p => p
                                .reference("variable", a => a.component_parameter("property variables"), sc => sc
                                    .StateConstraint("sibling", "type", "sibling", "Sibling", sc => sc
                                        .StateConstraint("component", "type", "component", "Component", sc => sc)
                                    )
                                )
                            )
                            .State("state constraint", "StateConstraintSelection", sc => sc, p => p
                                .reference("constraint", a => a.component_parameter("state constraints"), sc => sc)
                            )
                    )
            )
            .selectorMock("regular lookup selection", "LookupSelection"
                , par => par
                    .lookup("property variables", t => t.type("node"), s => s.DTPStep(t => t.dictionary("properties")), "variables", t => t.regular())
                    .lookup("component parameters", t => t.root(), s => s.DTPStep(t => t.dictionary("types")), "parameters", t => t.regular())
                , p => p
                    .stateGroup("type", "LookupSelectionType",
                        s => s
                            .State("component parameter", "LookupComponentTypeParameterSelection", sc => sc, p => p
                                .reference("parameter", a => a.component_parameter("component parameters"), sc => sc
                                    .StateConstraint("lookup", "type", "lookup", "CTPLookup", sc => sc
                                        .StateConstraint("regular", "lookup type", "regular", "CTPRegularLookup", sc => sc)
                                    )
                                )
                            )
                            .State("property variable", "LookupPropertyVariableSelection", sc => sc, p => p
                                .reference("variable", a => a.component_parameter("property variables"), sc => sc
                                    .StateConstraint("sibling", "type", "sibling", "Sibling", sc => sc
                                        .StateConstraint("dictionary", "type", "dictionary", "DictionaryX", sc => sc)
                                    )
                                )
                            )
                    )
            )
            .selectorMock("delayed lookup selection", "DelayedLookupSelection"
                , par => par
                    .lookup("property variables", t => t.type("node"), s => s.DTPStep(t => t.dictionary("properties")), "variables", t => t.regular())
                    .lookup("component parameters", t => t.root(), s => s.DTPStep(t => t.dictionary("types")), "parameters", t => t.regular())
                , p => p
                    .stateGroup("type", "DelayedLookupSelectionType",
                        s => s
                            .State("component type parameter", "DelayedComponentTypeComponentTypeParameterSelection", sc => sc, p => p
                                .reference("parameter", a => a.component_parameter("component parameters"), sc => sc
                                    .StateConstraint("component type", "type", "node", "CTPComponentType", sc => sc
                                        .StateConstraint("unresolved", "node type", "unresolved", "CTPUnresolvedComponentType", sc => sc)
                                    )
                                )
                                .reference("property"

                                    //.PropertyVariable("parameter", src => src.sibling("parameter"))
                                    , t => t.property_variable("parameter"), sc => sc
                                        .StateConstraint("dictionary", "type", "dictionary", "DictionaryX", sc => sc)
                                )
                            )
                            .State("lookup parameter", "DelayedLookupComponentTypeParameterSelection", sc => sc, p => p
                                .reference("parameter", a => a.component_parameter("component parameters"), sc => sc
                                    .StateConstraint("lookup", "type", "lookup", "CTPLookup", sc => sc
                                        .StateConstraint("delayed", "lookup type", "delayed", "CTPDelayedLookup", sc => sc)
                                    )
                                )
                            )
                            .State("property variable", "DelayedLookupPropertyVariableSelection", sc => sc, p => p
                                .reference("variable", a => a.component_parameter("property variables"), sc => sc
                                    .StateConstraint("sibling", "type", "sibling", "Sibling", sc => sc
                                        .StateConstraint("dictionary", "type", "dictionary", "DictionaryX", sc => sc)
                                    )
                                )
                            )
                    )
            )
            .selectorMock("auto create lookup selection", "AutoCreateLookupSelection"
                , par => par
                    .lookup("property variables", t => t.type("node"), s => s.DTPStep(t => t.dictionary("properties")), "variables", t => t.regular())
                    .lookup("component parameters", t => t.root(), s => s.DTPStep(t => t.dictionary("types")), "parameters", t => t.regular())
                , p => p
                    .stateGroup("type", "AutoCreateLookupSelectionType",
                        s => s
                            .State("component parameter", "AutoCreateComponentTypeParameterSelection", sc => sc, p => p
                                .reference("parameter", a => a.component_parameter("component parameters"), sc => sc
                                    .StateConstraint("lookup", "type", "lookup", "CTPLookup", sc => sc
                                        .StateConstraint("auto create", "lookup type", "auto create", "CTPAutoCreateLookup", sc => sc)
                                    )
                                )
                            )
                            .State("property variable", "AutoCreatePropertyVariableSelection", sc => sc, p => p
                                .reference("variable", a => a.component_parameter("property variables"), sc => sc
                                    .StateConstraint("sibling", "type", "sibling", "Sibling", sc => sc
                                        .StateConstraint("dictionary", "type", "dictionary", "DictionaryX", sc => sc)
                                    )
                                )
                            )
                    )
            )
            .componentType("state constraints", "StateConstraints",
                v => v
                    .ComponentTypeParameter("property", t => t.node("Property", t => t.unresolved()))
                ,
                p => p
                    .dictionary("constraints", "StateConstraint",
                        p => p
                            .reference("property", l => l.component_parameter("property"), sc => sc
                                .StateConstraint("state group", "type", "state group", "StateGroup", sc => sc)
                            )
                            .reference("state"

                                //.PropertyVariable("state group", t => t.sibling("property"))
                                ,
                                sel => sel
                                    .property_variable("property"),
                                sc => sc
                            )
                            .component("sub constraints", "state constraints", a => a
                                .ComponentTypeArgument("property", t => t.node(t => t.raw("FIXME_STATE_CONSTRAINT_PATH")))
                            )
                        ,
                        sc => sc
                    )
            )
            .selectorMock("dictionary type path", "DictionaryTypePath",
                v => v
                    .component_type("root", "Root", t => t.unresolved()),
                p => p
                    .stateGroup("start", "DTPStart", s => s
                        .State("root", "StartFromRoot", sc => sc, p => p)
                        .State("type", "StartFromType", sc => sc, p => p
                            .delayedReference("type", ls => ls.component_type_parameter("types"), sc => sc//FIX reference to 'types'
                                .StateConstraint("component type", "type", "component type", "ComponentType", sc => sc)
                            )
                        )
                    )
                    .list("steps"

                        //.PropertyVariable("start", src => src.sibling("start"))
                        , "DTPStep"
                        , p => p
                            .stateGroup("type", "DTPStepType", s => s
                                .State("dictionary", "DictionaryStep", sc => sc, p => p
                                    .reference("property", t => t.property_variable("FOO"), sc => sc
                                        .StateConstraint("dictionary", "type", "dictionary", "DictionaryX", sc => sc)
                                    )
                                )
                                .State("state", "StateStep", sc => sc, p => p
                                    .reference("property", t => t.property_variable("FOO"), sc => sc
                                        .StateConstraint("state group", "type", "state group", "StateGroup", sc => sc)
                                    )
                                    .reference("state"
                                        , t => t.property_variable("property"), sc => sc)

                                )
                            )
                    )
                    .delayedReference("property"

                        //.PropertyVariable("steps", s => s.sibling("steps"))
                        , ls => ls.property_variable("component type"), sc => sc
                            .StateConstraint("dictionary", "type", "dictionary", "DictionaryX", sc => sc)
                    )
            )
            .componentType("block", "Block"
                , par => par
                    .ComponentTypeParameter("root", t => t.node("Root", t => t.unresolved()))
                , p => p
                    .list("steps", "BlockStep", p => p
                        .stateGroup("type", "BlockStepType", p => p
                            .State("repeat", "BlockListStep", sc => sc, p => p
                                .component("global", "global", a => a)
                                .delayedReference("type", t => t.component_type_parameter("root"), sc => sc
                                    .StateConstraint("component type", "type", "component type", "ComponentType", sc => sc)
                                )
                                .component("block", "block", a => a
                                    .ComponentTypeArgument("root", t => t.lookup(t => t.context(t => t.component_parameter("types"))))
                                )
                            )
                            .State("reference", "BlockReferenceStep", sc => sc, p => p
                                .text("HACK_DICTIONARY_GLOBAL_NAME")
                                .component("state constraints", "state constraints", a => a
                                    .ComponentTypeArgument("property", t => t.node(t => t.context(t => t.component_parameter("FIX_REFERENCED_TYPE"))))
                                ))
                            .State("selection call", "BlockCallStep", sc => sc, p => p
                                .text("HACK_SELECTION")
                            )
                            .State("choice", "BlockChoiceStep", sc => sc, p => p
                                .dictionary("options", "BlockChoiceStepOptions",
                                    p => p
                                        .component("block", "block", a => a
                                            .ComponentTypeArgument("root", t => t.lookup(t => t.context(t => t.component_parameter("types"))))
                                        )
                                    , sc => sc
                                )
                            )
                        )
                    )
            )
            .componentType("shortcut node strategy", "ShortcutNodeStrategy", par => par
                .component_type("node", "node", t => t.resolved())
                , p => p
                    .fulfillingDictionary(
                        "property strategies"

                        , "ShortcutPropertyStrategy"
                        , p => p
                            .reference("property", t => t.component_parameter("properties"), sc => sc)
                            .stateGroup("type", "ShortcutStrategyType", s => s
                                .State("dictionary", "DictionaryShortcut",
                                    sc => sc
                                        .StateConstraint("dictionary", "type", "dictionary", "DictionaryX", sc => sc)
                                    ,
                                    p => p
                                        .stateGroup("dictionary strategy", "DictionaryShortcutStrategy", s => s
                                            .State("empty", "EmptyDictionaryStrategy", sc => sc, p => p
                                            )
                                        )
                                )
                                .State("state group", "StategroupShortcut",
                                    sc => sc
                                        .StateConstraint("state group", "type", "state group", "StateGroup", sc => sc)
                                    ,
                                    p => p
                                        .stateGroup("state group strategy", "StategroupShortcutStrategy", s => s
                                            .State("set", "SetStateGroupStrategy", sc => sc, p => p
                                                .reference("state", t => t.component_parameter("FIX_SHOULD_BE_REFERENCE_TO_STATE_CONSTRAINT"), sc => sc)
                                                .component("node strategy", "shortcut node strategy", a => a
                                                    .ComponentTypeArgument("properties", t => t.lookup(t => t.raw("COMP_ARG 1")))
                                                )
                                            )
                                        )
                                )
                            )
                        , sc => sc
                        , l => l.component_parameter("properties")
                        , cons => cons
                    )
            )
            .componentType("node", "Node",
                v => v
                    .component_type("root", "Root", t => t.unresolved())
                    .lookup("parent variables", t => t.type("node"), s => s.DTPStep(t => t.dictionary("properties")), "variables", t => t.auto_create())
                ,
                pb => pb
                    .orderedDictionary("properties", "getPropertyDependencies", "Property", p => p
                        .autoCreateDictionary("variables", "PropertyVariable", p => p
                            .stateGroup("source", "LookupVariableSource"
                                , s => s
                                    .State("sibling", "Sibling", sc => sc, p => p
                                        .reference("sibling property", t => t.property_variable("sibling properties"), sc => sc)
                                    )
                                    .State("parent variable", "ParentVariableReference", sc => sc, p => p
                                        .reference("variable", a => a.component_parameter("parent variables"), sc => sc)
                                    )
                            )
                            , sc => sc
                        )
                        .stateGroup("type", "PropertyType", s => s
                            .State("block", "BlockProperty", sc => sc, p => p
                                .component("block", "block", a => a
                                    .ComponentTypeArgument("root", t => t.lookup(t => t.context(t => t.component_parameter("types"))))

                                )
                            )
                            .State("component", "Component", sc => sc, p => p
                                .delayedReference("type", ls => ls.component_type_parameter("types"), c => c
                                    .StateConstraint("component type", "type", "component type", "ComponentType", sc => sc)
                                )
                                .fulfillingDictionary("arguments", "ComponentTypeArgument", p => p
                                    .stateGroup("type", "ComponentArgumentType", s => s
                                        .State("auto create lookup", "ComponentAutoCreateLookupArgument", sc => sc, p => p
                                            .stateGroup("expression type"

                                                , "ComponentAutoCreateLookupArgumentType"
                                                , s => s
                                                    .State("non existent", "NonExistentAutoCreateLookup", sc => sc, p => p)
                                                    .State("context", "ContextAutoCreateLookupArgument", sc => sc, p => p
                                                        .component("lookup selection", "auto create lookup selection", a => a
                                                            .ComponentTypeArgument(
                                                                "property variables", t => t.lookup(t => t.context(t => t.property_variable("variables")))
                                                            )
                                                            .ComponentTypeArgument(
                                                                "component parameters", t => t.lookup(t => t.context(t => t.component_parameter("component parameters")))
                                                            )
                                                        ))
                                                    .State("raw", "RAW1", sc => sc, p => p
                                                        .text("HACK_RAW")
                                                    )
                                            )
                                        )
                                        .State("lookup", "ComponentLookupArgument", sc => sc, p => p
                                            .stateGroup("expression type"

                                                , "ComponentLookupArgumentType", s => s
                                                    .State("non existent", "NonExistentLookup", sc => sc, p => p)
                                                    .State("context", "ContextLookupArgument", sc => sc, p => p
                                                        .component("lookup selection", "regular lookup selection", a => a
                                                            .ComponentTypeArgument(
                                                                "property variables", t => t.lookup(t => t.context(t => t.property_variable("variables")))
                                                            )
                                                            .ComponentTypeArgument(
                                                                "component parameters", t => t.lookup(t => t.context(t => t.component_parameter("component parameters")))
                                                            )
                                                        ))
                                                    .State("raw", "RAW2", sc => sc, p => p
                                                        .text("HACK_RAW")
                                                    )
                                            )
                                        )
                                        .State("delayed lookup", "ComponentDelayedLookupArgument", sc => sc, p => p
                                            .stateGroup("expression type"

                                                , "ComponentDelayedLookupArgumentType", s => s
                                                    .State("context", "ContextDelayedLookupArgument", sc => sc, p => p
                                                        .component("lookup selection", "delayed lookup selection", a => a
                                                            .ComponentTypeArgument(
                                                                "property variables", t => t.lookup(t => t.context(t => t.property_variable("variables")))
                                                            )
                                                            .ComponentTypeArgument(
                                                                "component parameters", t => t.lookup(t => t.context(t => t.component_parameter("component parameters")))
                                                            )
                                                        ))
                                                    .State("raw", "RAW3", sc => sc, p => p
                                                        .text("HACK_RAW")
                                                    )
                                            )
                                        )
                                        .State("node", "ComponentNodeArgument", sc => sc, p => p
                                            .stateGroup("expression type"

                                                , "ComponentNodeArgumentType", s => s
                                                    .State("context", "ContextNodeArgument", sc => sc, p => p
                                                        .component("node selection", "node selection", a => a
                                                            .ComponentTypeArgument(
                                                                "property variables", t => t.lookup(t => t.context(t => t.property_variable("variables")))
                                                            )
                                                            .ComponentTypeArgument(
                                                                "component parameters", t => t.lookup(t => t.context(t => t.component_parameter("component parameters")))
                                                            )
                                                            .ComponentTypeArgument(
                                                                "state constraints", t => t.lookup(t => t.context(t => t.property_variable("FIX_STATE_CONSTRAINT")))
                                                            )
                                                        ))
                                                    .State("raw", "RAW4", sc => sc, p => p
                                                        .text("HACK_RAW")
                                                    )
                                            )
                                        )
                                    )
                                    , sc => sc
                                    , t => t.property_variable("type") //"var_type.constraints.type.state.getRequiringDictionary(x => x.parameters)"
                                    , sc => sc
                                )
                            )
                            .State("dictionary", "DictionaryX", sc => sc, p => p
                                .component("global", "global", a => a)
                                .component("node"

                                    , "node"
                                    , a => a
                                        .ComponentTypeArgument("root", t => t.lookup(t => t.raw("COMP_ARG 2")))
                                        .ComponentTypeArgument("component parameters", t => t.lookup(t => t.raw("COMP_ARG 3")))
                                        .ComponentTypeArgument("parent variables", t => t.lookup(t => t.raw("COMP_ARG 4")))
                                )
                                .stateGroup("type"

                                    , "DictionaryType"
                                    , s => s
                                        .State("regular", "RegularDictionary", sc => sc, p => p)
                                        .State("ordered", "OrderedDictionary", sc => sc, p => p
                                            .text("HACK_ORDER_FUNCTION")
                                        )
                                        .State("auto create", "AutoCreateDictionary", sc => sc, p => p)
                                        .State("fulfilling", "FulfillingDictionary", sc => sc, p => p
                                            .component("lookup selection", "regular lookup selection", a => a
                                                .ComponentTypeArgument("property variables", t => t.lookup(t => t.raw("COMP_ARG 5")))
                                                .ComponentTypeArgument("component parameters", t => t.lookup(t => t.context(t => t.component_parameter("component parameters"))))
                                            )
                                            .component("state constraints", "state constraints", a => a
                                                .ComponentTypeArgument("property", t => t.node(t => t.context(t => t.component_parameter("FIX_TYPE_REFERENCED_BY_FULFILLING"))))
                                            )
                                        )
                                )
                                .dictionary("shortcuts", "Shortcut", p => p
                                    .component("node strategy", "shortcut node strategy", a => a
                                        .ComponentTypeArgument("node", t => t.node(t => t.context(t => t.property_variable("node"))))
                                    )
                                    // .list("steps", "ShortcutStep", p => p
                                    //     .reference("property", "Property", t => t.component_parameter("FIXME3"), sc => sc
                                    //         .StateConstraint("state group", "type", "state group", "StateGroup", sc => sc)
                                    //     )
                                    //     .reference("state", "State", t => t.component_parameter("FIXME4"), sc => sc)
                                    // )
                                    .block("steps", b => b
                                        .BlockStep(t => t.repeat("ShortcutStep", "node", b => b
                                            .BlockStep(t => t.reference("Property", sc => sc
                                                .StateConstraint("state group", "type", "state group", "StateGroup", sc => sc)
                                            ))
                                            .BlockStep(t => t.reference("State", sc => sc))
                                        ))
                                    )
                                    , sc => sc
                                )
                            )
                            .State("list", "ListX", sc => sc, p => p
                                .component("global", "global", a => a)
                                .component("node", "node",
                                    a => a
                                        .ComponentTypeArgument("root", t => t.lookup(t => t.raw("COMP_ARG 8")))
                                        .ComponentTypeArgument("component parameters", t => t.lookup(t => t.raw("COMP_ARG 9")))
                                        .ComponentTypeArgument("parent variables", t => t.lookup(t => t.raw("COMP_ARG 10")))
                                )
                            )
                            .State("state group", "StateGroup", sc => sc, p => p
                                .component("global", "global", a => a)
                                .dictionary("states", "State",
                                    p => p
                                        .component("state constraints", "state constraints", a => a
                                            .ComponentTypeArgument("property", t => t.node(t => t.context(t => t.component_parameter("FIX_REFERENCED_TYPE"))))
                                        )
                                        .component("global", "global", a => a)
                                        .component("node", "node", a => a
                                            .ComponentTypeArgument("root", t => t.lookup(t => t.raw("COMP_ARG 11")))
                                            .ComponentTypeArgument("component parameters", t => t.lookup(t => t.raw("COMP_ARG 11")))
                                            .ComponentTypeArgument("parent variables", t => t.lookup(t => t.raw("COMP_ARG 12")))
                                        )
                                    ,
                                    sc => sc
                                )
                            )
                            .State("text", "TextProperty", sc => sc, p => p
                                .stateGroup("text type"

                                    , "TextType"
                                    , s => s
                                        .State("regular", "RegularTextProperty", sc => sc, p => p)
                                        .State("reference", "ReferenceX", sc => sc, p => p
                                            .stateGroup("reference type", "ReferenceType", s => s
                                                .State("regular", "RegularReference", sc => sc, p => p
                                                    .component("lookup selection", "regular lookup selection", a => a
                                                        .ComponentTypeArgument(
                                                            "property variables", t => t.lookup(t => t.context(t => t.property_variable("property variables")))
                                                        )
                                                        .ComponentTypeArgument(
                                                            "component parameters", t => t.lookup(t => t.context(t => t.component_parameter("component parameters")))
                                                        )
                                                    )
                                                )
                                                .State("delayed", "DelayedReference", sc => sc, p => p
                                                    .component("lookup selection", "delayed lookup selection", a => a
                                                        .ComponentTypeArgument(
                                                            "property variables", t => t.lookup(t => t.context(t => t.property_variable("property variables")))
                                                        )
                                                        .ComponentTypeArgument(
                                                            "component parameters", t => t.lookup(t => t.context(t => t.component_parameter("component parameters")))
                                                        )
                                                    )
                                                )
                                            )
                                            .component("state constraints", "state constraints", a => a
                                                .ComponentTypeArgument("property", t => t.node(t => t.context(t => t.component_parameter("FIX_REFERENCED_TYPE"))))
                                            )
                                        )
                                )
                            )
                        )
                        , sc => sc
                            .Shortcut("autoCreateDictionary", s => s, str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("dictionary", sc => sc
                                    .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("auto create", sc => sc)))
                                )))
                            )
                            .Shortcut("block", s => s.ShortcutStep("type", "block"), str => str
                                ////.ShortcutPropertyStrategy("variables", t => t.state_group(t => t.set("")))
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("block", sc => sc)))
                            )
                            .Shortcut("component", s => s.ShortcutStep("type", "component"), str => str
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("component", sc => sc)))
                                //.ShortcutPropertyStrategy("type", t => t.foo())
                            )
                            .Shortcut("delayedReference", s => s.ShortcutStep("type", "text").ShortcutStep("text type", "reference").ShortcutStep("reference type", "delayed"), str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("text", sc => sc
                                    .ShortcutPropertyStrategy("text type", t => t.state_group(t => t.set("reference", sc => sc
                                        .ShortcutPropertyStrategy("reference type", t => t.state_group(t => t.set("delayed", sc => sc
                                        )))
                                    )))
                                )))
                            )
                            .Shortcut("dictionary", s => s.ShortcutStep("type", "dictionary").ShortcutStep("type", "regular"), str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("dictionary", sc => sc
                                    .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("regular", sc => sc)))
                                )))
                            )
                            .Shortcut("fulfillingDictionary", s => s.ShortcutStep("type", "dictionary").ShortcutStep("type", "fulfilling"), str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("dictionary", sc => sc
                                    .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("fulfilling", sc => sc)))
                                )))
                            )
                            .Shortcut("list", s => s.ShortcutStep("type", "list"), str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("list", sc => sc)))
                            )
                            .Shortcut("orderedDictionary", s => s.ShortcutStep("type", "dictionary").ShortcutStep("type", "ordered"), str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("dictionary", sc => sc
                                    .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("ordered", sc => sc)))
                                )))
                            )
                            .Shortcut("reference", s => s.ShortcutStep("type", "text").ShortcutStep("text type", "reference").ShortcutStep("reference type", "regular"), str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("text", sc => sc
                                    .ShortcutPropertyStrategy("text type", t => t.state_group(t => t.set("reference", sc => sc
                                        .ShortcutPropertyStrategy("reference type", t => t.state_group(t => t.set("regular", sc => sc
                                        )))
                                    )))
                                )))
                            )
                            .Shortcut("stateGroup", s => s.ShortcutStep("type", "state group"), str => str
                                //.ShortcutPropertyStrategy("variables", t => t.foo())
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("state group", sc => sc)))
                            )
                            .Shortcut("text", s => s.ShortcutStep("type", "text").ShortcutStep("text type", "regular"), str => str
                                .ShortcutPropertyStrategy("variables", t => t.dictionary(t => t.empty()))
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("text", sc => sc
                                    .ShortcutPropertyStrategy("text type", t => t.state_group(t => t.set("regular", sc => sc)))
                                )))
                            )
                    )
            )
        ,
        p => p
            .component("global", "global", a => a)
            .dictionary("types"

                , "Type"
                ,
                p => p
                    .component("global", "global", a => a)
                    .dictionary("parameters"

                        , "ComponentTypeParameter"
                        , p => p
                            .stateGroup("type", "ComponentTypeParameterType", s => s
                                .State("lookup", "CTPLookup", sc => sc, p => p
                                    .stateGroup("lookup type", "CTPLookupType", s => s
                                        .State("regular", "CTPRegularLookup", sc => sc, p => p)
                                        .State("auto create", "CTPAutoCreateLookup", sc => sc, p => p)
                                        .State("delayed", "CTPDelayedLookup", sc => sc, p => p)
                                    )
                                    .component("dictionary type path", "dictionary type path", a => a
                                        .ComponentTypeArgument("root", t => t.lookup(t => t.raw("COMP_ARG 16")))
                                    )
                                )
                                .State("component type", "CTPComponentType", sc => sc, p => p
                                    .text("HACK_NODE_GLOBAL_NAME")
                                    .stateGroup("component type state", "CTPComponentTypeState", s => s
                                        .State("resolved", "CTPResolvedComponentType", sc => sc, p => p)
                                        .State("unresolved", "CTPUnresolvedComponentType", sc => sc, p => p)
                                    )
                                )
                            )
                        , sc => sc
                            .Shortcut("lookup", t => t, str => str
                                .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("lookup", sc => sc)))
                            )
                    )
                    .stateGroup("type"

                        //.PropertyVariable("parameters", src => src.sibling("parameters"))
                        , "TypeType"
                        , s => s
                            .State("selector", "Selector", sc => sc, p => p
                                .text("HACK_RESOLVED_TYPE")
                                .dictionary("start options", "SelectorStartOptions",
                                    p => p
                                        .reference("parameter", t => t.property_variable("parameters"), sc => sc)
                                        .component("block", "block", a => a
                                            .ComponentTypeArgument("root", t => t.lookup(t => t.context(t => t.component_parameter("types"))))
                                        )
                                    , sc => sc
                                )
                                .component("block", "block", a => a
                                    .ComponentTypeArgument("root", t => t.lookup(t => t.context(t => t.property_variable("types"))))
                                )
                            )
                            .State("component type", "ComponentType", sc => sc, p => p
                                .component("node"

                                    //.PropertyVariable("parameters", src => src.sibling("parameters"))
                                    , "node"
                                    , a => a
                                        .ComponentTypeArgument("root", t => t.lookup(t => t.raw("COMP_ARG 19")))
                                        .ComponentTypeArgument("component parameters", t => t.lookup(t => t.raw("COMP_ARG 122")))
                                        .ComponentTypeArgument("parent variables", t => t.auto_create_lookup(t => t.non_existent()))
                                )
                            )
                    )
                ,
                sc => sc
                    .Shortcut("componentType", t => t.ShortcutStep("type", "component type"), str => str
                        .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("component type", sc => sc)))
                    )
                    .Shortcut("selector", t => t.ShortcutStep("type", "selector"), str => str
                        .ShortcutPropertyStrategy("type", t => t.state_group(t => t.set("selector", strat => strat)))
                    )
            )
            .component("root"

                //.PropertyVariable("types", src => src.sibling("types"))
                , "node"
                , a => a
                    .ComponentTypeArgument("root", t => t.lookup(t => t.raw("COMP_ARG 22")))
                    .ComponentTypeArgument("component parameters", t => t.lookup(t => t.non_existent()))
                    .ComponentTypeArgument("parent variables", t => t.auto_create_lookup(t => t.non_existent()))
            )
    )
}
